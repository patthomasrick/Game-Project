
/*
Authors:	Isaac Payne, Chris Martin, Patrick Thomas
Date:		1/26/17
Purpose: 	play hang gliding
*/

/**
 * @author Patrick Thomas
 * @author Isaac Payne
 * @author Chris Martin
 * @version 2/5/17
 */

// import statements
import java.applet.Applet;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemListener;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.URL;
import java.util.Date;

import javax.imageio.ImageIO;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.Timer;

/**
 * @author Patrick Thomas
 * 
 * Applet to contain game. Map is generated by Map class. Implements all event listeners,
 * however, mouse is the only control method used.
 */
public class Game extends Applet
implements MouseListener, ActionListener, ItemListener, KeyListener, MouseMotionListener
{
	/** to fix warning... */
	private static final long serialVersionUID = 1L;

	/** double buffering variables */
	private Image dbImage;
	private Graphics dbg;
	
	// audio clips
	Clip current_clip;
	
	// song names:
	private final String MUSIC_MENU = "menu1.wav";
	private final String MUSIC_GAME = "game1.wav";
	private final String SOUND_CRASH = "crash1.wav";
	private final String SOUND_CLICK = "click1.wav";
	private String music_current = "none";
	
	// hang glider image
	BufferedImage hg_img;
	
	/** timing */
	Date date = new Date();
	long lasttime = date.getTime();
	int timesince = 1000/60;
	
	public Timer timer;
	private int aWidth = 800, aHeight = 600;
	
	/** Creates map. Stores GameObstacles and handles the ticking of game
	 * objects */
	public Map m = new Map(aWidth, aHeight, 2.5);
	
	public Menu.Button b;
	
	/** Creates hang glider. This is the player that the user controls. */
	public TestGlider hg;
	public TestGlider DEFAULT_HG;
	
	public boolean died_yet = false;
  
	public int mouse_x = 0;
	public int mouse_y = 0;
	public boolean clicked = false;
	public boolean pressed = false;
	private double scrollspeed;
	
	//Variables for menu
	private boolean gr = false; //game running
	private boolean in_mm = true; //in main menu
	private boolean in_pm = false; //in pause menu
	private boolean in_em = false; //in end menu
	private boolean in_cm = false; //in credits menu
	private Menu mm = new Menu(); //create main menu
	private Menu pm = new Menu(); //create pause menu
	private Menu em = new Menu(); //create end menu
	private Menu cm = new Menu(); //create credits menu
	private Menu.Button mm_start_b; //create main menu start button
	private Menu.Button mm_quit_b; //create main menu quit button
	private Menu.Button mm_credits_b; //create main menu credits button
	private Menu.Button pm_resume_b; //create pause menu resume button
	private Menu.Button pm_reload_b; //create pause menu reload button
	private Menu.Button em_restart_b; //create end menu restart button
	private Menu.Button em_reload_b; //create end menu reload button
	private Menu.Button cm_reload_b; //create credits menu reload button
	private Sprite mb; //create general menu background
	private Sprite cb; //create credits menu background
	
	public static Font title_font = new Font("Dialog", Font.BOLD, 70); //create title font
	public static Font credits_font1 = new Font("Dialog", Font.BOLD, 55); //create credits title font
	public static Font credits_font2 = new Font("Dialog", Font.PLAIN, 20); //create credits body font

	
	// mouse events
	public void mouseReleased(MouseEvent e) 
	{
		this.clicked = false;
	} // end mouseReleased
	
	public void mouseEntered(MouseEvent e) {}
	public void mouseClicked(MouseEvent e) {}
	public void mousePressed(MouseEvent e) 
	{
		this.clicked = true;
	}// end mousePressed
	
	public void mouseExited(MouseEvent e) {}
	public void mouseMoved(MouseEvent e) // track mouse movements
	{
		mouse_x = e.getX();
		mouse_y = e.getY();
	} // end mouseMoved
	
	public void mouseDragged(MouseEvent e) {}
	
	// applet events
	public void actionPerformed(java.awt.event.ActionEvent e) {}
	public void itemStateChanged(java.awt.event.ItemEvent e) {}
	
	//keyboard events
	public void keyReleased(java.awt.event.KeyEvent e) {}
	public void keyPressed(java.awt.event.KeyEvent p1) 
	{
		//Allows space bar to initiate pause menu
		if (p1.getKeyCode() == java.awt.event.KeyEvent.VK_SPACE && in_mm != true && in_em != true)
		{
			in_pm = true;
			gr = false;
			in_mm = false;
			in_em = false;
		} // end Spacebar
	} // end keyPressed
	
	public void keyTyped(java.awt.event.KeyEvent e) {}
	
	
	/**Initialize the applet.
	 * Add listeners for user input, configure window, start the timer,
	 * and create the map and hang glider.
	 */
	public void init()
	{
		// add mouse and key listeners
		addMouseListener(this);
		addMouseMotionListener(this);
		addKeyListener(this);
		
		// load image of hang glider
		try
		{
	        URL url = new URL(getCodeBase(), "Hang glider white scaled.png");
		    hg_img = ImageIO.read(url);
		} // end try
		catch (IOException e) {}
		
		DEFAULT_HG = new TestGlider(100.0, 300.0, 15, 30, hg_img);
		hg = new TestGlider(DEFAULT_HG);
		
		// focus window
		setFocusable(true);
		
		// configure window
		setSize(aWidth, aHeight);
		setBackground(Color.WHITE);
		
		/** Start timer */
		timer = new Timer(1000/60, new MyTimer());
		timer.start();
		
		/** Create map and hang glider */
		m = new Map(aWidth, aHeight, 2.5);
		
		//Creates all buttons, backgrounds, and assigns buttons to their respective menus
		mm_start_b = new Menu.Button(aWidth*0.3, aHeight*0.4, (int) (aHeight*0.15), (int) (aWidth*0.4), Menu.button_color, "Start");
		mm_quit_b = new Menu.Button(aWidth*0.3, aHeight*0.6, (int) (aHeight*0.15), (int) (aWidth*0.4), Menu.button_color, "Quit");
		mm_credits_b = new Menu.Button(aWidth*0.75, aHeight*0.9, (int) (aHeight*0.1), (int) (aWidth*0.25), Menu.button_color, "Credits");
		pm_resume_b = new Menu.Button(aWidth*0.3, aHeight*0.4, (int) (aHeight*0.15), (int) (aWidth*0.4), Menu.button_color, "Resume");
		pm_reload_b = new Menu.Button(aWidth*0.3, aHeight*0.6, (int) (aHeight*0.15), (int) (aWidth*0.4), Menu.button_color, "Main Menu");
		em_restart_b = new Menu.Button(aWidth*0.3, aHeight*0.4, (int) (aHeight*0.15), (int) (aWidth*0.4), Menu.button_color, "Restart");
		em_reload_b = new Menu.Button(aWidth*0.3, aHeight*0.6, (int) (aHeight*0.15), (int) (aWidth*0.4), Menu.button_color, "Main Menu");
		cm_reload_b = new Menu.Button(aWidth*0.3, aHeight*0.8, (int) (aHeight*0.1), (int) (aWidth*0.4), Menu.button_color, "Main Menu");

		mm.add_button(mm_start_b);
		mm.add_button(mm_quit_b);
		mm.add_button(mm_credits_b);
		pm.add_button(pm_resume_b);
		pm.add_button(pm_reload_b);
		em.add_button(em_restart_b);
		em.add_button(em_reload_b);
		cm.add_button(cm_reload_b);
		mb = new Sprite(aWidth*0.2, aHeight*0.3, (int) (aHeight*0.55), (int) (aWidth*0.6), Menu.bg_color);
		cb = new Sprite(aWidth*0.1, aHeight*0.1, (int) (aHeight*0.75), (int) (aWidth*0.8), Menu.bg_color);
	} // end initialization
	
	
	/**Draw the objects in the game to the screen.
	 * @param g		Graphics object to draw to
	 */
	public void paint(Graphics g)
	{	
		// cast graphics object to graphics 2d
		Graphics2D g2 = (Graphics2D) g;
		// turn on antialiasing
		g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		
		// draw bg
		g2.setColor(Map.BG_COLOR_D);
		g2.fillRect(0, 0, aWidth, aHeight);
		
		// draw map and its objects
		m.draw(g2);
		
		// draw hangglider
		hg.draw(g2);
		
		// draw main menu
		if (in_mm == true)
		{
			mb.draw(g2);
			mm.draw(g2);
			
			g2.setFont(title_font);
			int w1 = (g2.getFontMetrics().stringWidth("Cave Glider"))/2;
			int h1 = (g2.getFontMetrics().getHeight())/4;
			g2.setColor(Color.BLACK);
			g2.drawString("Cave Glider", (int)((aWidth/2)-w1+2), (int)((aHeight/5)+h1+2));
			g2.setColor(Color.WHITE);
			g2.drawString("Cave Glider", (int)((aWidth/2)-w1), (int)((aHeight/5)+h1));
		}
		
		//draw end menu
		if (in_em == true)
		{
			mb.draw(g2);
			em.draw(g2);
			
			g2.setFont(title_font);
			int w1 = (g2.getFontMetrics().stringWidth("Cave Glider"))/2;
			int h1 = (g2.getFontMetrics().getHeight())/4;
			g2.setColor(Color.BLACK);
			g2.drawString("Cave Glider", (int)((aWidth/2)-w1+2), (int)((aHeight/5))+h1+2);
			g2.setColor(Color.WHITE);
			g2.drawString("Cave Glider", (int)((aWidth/2)-w1), (int)((aHeight/5))+h1);
		}
		
		//draw pause menu
		if (in_pm == true)
		{
			mb.draw(g2);
			pm.draw(g2);
			
			g2.setFont(title_font);
			int w1 = (g2.getFontMetrics().stringWidth("Cave Glider"))/2;
			int h1 = (g2.getFontMetrics().getHeight())/4;
			g2.setColor(Color.BLACK);
			g2.drawString("Cave Glider", (int)((aWidth/2)-w1+2), (int)((aHeight/5)+h1+2));
			g2.setColor(Color.WHITE);
			g2.drawString("Cave Glider", (int)((aWidth/2)-w1), (int)((aHeight/5)+h1));
		}
		
		//draw credits menu
		if (in_cm == true)
		{
			cb.draw(g2);
			cm.draw(g2);
			
			g2.setFont(title_font);
			int w1 = (g2.getFontMetrics().stringWidth("Cave Glider"))/2;
			int h1 = (g2.getFontMetrics().getHeight())/4;
			g2.setColor(Color.BLACK);
			g2.drawString("Cave Glider", (int)((aWidth/2)-w1+2), (int)((aHeight/20)+h1+2));
			g2.setColor(Color.WHITE);
			g2.drawString("Cave Glider", (int)((aWidth/2)-w1), (int)((aHeight/20)+h1));
			
			//Credits title
			g2.setFont(credits_font1);
			int w2 = (g2.getFontMetrics().stringWidth("Credits"))/2;
			int h2 = (g2.getFontMetrics().getHeight())/4;
			g2.setColor(Color.BLACK);
			g2.drawString("Credits", (int)((aWidth/2)-w2+2), (int)((aHeight/6)+h2+2));
			g2.setColor(Color.WHITE);
			g2.drawString("Credits", (int)((aWidth/2)-w2), (int)((aHeight/6)+h2));
			
			//Author Credits
			g2.setFont(credits_font2);
			int w3 = (g2.getFontMetrics().stringWidth("Created By: Patrick Thomas, Isaac Payne, and Chris Martin"))/2;
			int h3 = (g2.getFontMetrics().getHeight())/4;
			g2.setColor(Color.BLACK);
			g2.drawString("Created By: Patrick Thomas, Isaac Payne, and Chris Martin", (int)((aWidth/2)-w3+2), (int)((aHeight/4)+h3+2));
			g2.setColor(Color.WHITE);
			g2.drawString("Created By: Patrick Thomas, Isaac Payne, and Chris Martin", (int)((aWidth/2)-w3), (int)((aHeight/4)+h3));
			
			//Hang Glider Credits
			int w4 = (g2.getFontMetrics().stringWidth("Hang Glider Credit: CC BY-SA 3.0,"))/2;
			int h4 = (g2.getFontMetrics().getHeight())/4;
			g2.setColor(Color.BLACK);
			g2.drawString("Hang Glider Credit: CC BY-SA 3.0,", (int)((aWidth*0.365)-w4+2), (int)((aHeight/3.3)+h4+2));
			g2.setColor(Color.WHITE);
			g2.drawString("Hang Glider Credit: CC BY-SA 3.0,", (int)((aWidth*0.365)-w4), (int)((aHeight/3.3)+h4));
			int w5 = (g2.getFontMetrics().stringWidth("https://commons.wikimedia.org/w/index.php?curid=531761"))/2;
			int h5 = (g2.getFontMetrics().getHeight())/4;
			g2.setColor(Color.BLACK);
			g2.drawString("https://commons.wikimedia.org/w/index.php?curid=531761", (int)((aWidth*0.5)-w5+2), (int)((aHeight/3)+h5+2));
			g2.setColor(Color.WHITE);
			g2.drawString("https://commons.wikimedia.org/w/index.php?curid=531761", (int)((aWidth*0.5)-w5), (int)((aHeight/3)+h5));
			
			
			//Menu Music Credits
			int w6 = (g2.getFontMetrics().stringWidth("Menu Music Credit: Hobo Pride by FRAIL is licensed under a"))/2;
			int h6 = (g2.getFontMetrics().getHeight())/4;
			g2.setColor(Color.BLACK);
			g2.drawString("Menu Music Credit: Hobo Pride by FRAIL is licensed under a", (int)((aWidth*0.5)-w6+2), (int)((aHeight/2.5)+h6+2));
			g2.setColor(Color.WHITE);
			g2.drawString("Menu Music Credit: Hobo Pride by FRAIL is licensed under a", (int)((aWidth*0.5)-w6), (int)((aHeight/2.5)+h6));
			int w7 = (g2.getFontMetrics().stringWidth("Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License"))/2;
			int h7 = (g2.getFontMetrics().getHeight())/4;
			g2.setColor(Color.BLACK);
			g2.drawString("Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License", (int)((aWidth*0.5)-w7+2), (int)((aHeight/2.3)+h7+2));
			g2.setColor(Color.WHITE);
			g2.drawString("Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 License", (int)((aWidth*0.5)-w7), (int)((aHeight/2.3)+h7));
			
			//Game Music Credits
			int w8 = (g2.getFontMetrics().stringWidth("Game Music: Spazzmatica Polka Kevin MacLeod (incompetech.com)"))/2;
			int h8 = (g2.getFontMetrics().getHeight())/4;
			g2.setColor(Color.BLACK);
			g2.drawString("Game Music: Spazzmatica Polka Kevin MacLeod (incompetech.com)", (int)((aWidth*0.5)-w8+2), (int)((aHeight/2)+h8+2));
			g2.setColor(Color.WHITE);
			g2.drawString("Game Music: Spazzmatica Polka Kevin MacLeod (incompetech.com)", (int)((aWidth*0.5)-w8), (int)((aHeight/2)+h8));
			int w9 = (g2.getFontMetrics().stringWidth("Licensed under Creative Commons: By Attribution 3.0 License"))/2;
			int h9 = (g2.getFontMetrics().getHeight())/4;
			g2.setColor(Color.BLACK);
			g2.drawString("Licensed under Creative Commons: By Attribution 3.0 License", (int)((aWidth*0.5)-w9+2), (int)((aHeight*.53)+h9+2));
			g2.setColor(Color.WHITE);
			g2.drawString("Licensed under Creative Commons: By Attribution 3.0 License", (int)((aWidth*0.5)-w9), (int)((aHeight*.53)+h9));
			
			//Sound effect credits
			int w10 = (g2.getFontMetrics().stringWidth("Cymbal noises: No machine-readable author provided. Clngre"))/2;
			int h10 = (g2.getFontMetrics().getHeight())/4;
			g2.setColor(Color.BLACK);
			g2.drawString("Cymbal noises: No machine-readable author provided. Clngre", (int)((aWidth*0.5)-w10+2), (int)((aHeight*.58)+h10+2));
			g2.setColor(Color.WHITE);
			g2.drawString("Cymbal noises: No machine-readable author provided. Clngre", (int)((aWidth*0.5)-w10), (int)((aHeight*.58)+h10));
			int w11 = (g2.getFontMetrics().stringWidth("(http://www.gnu.org/copyleft/fdl.html) or CC-BY-SA-3.0"))/2;
			int h11 = (g2.getFontMetrics().getHeight())/4;
			g2.setColor(Color.BLACK);
			g2.drawString("assumed (http://www.gnu.org/copyleft/fdl.html) or CC-BY-SA-3.0", (int)((aWidth*0.45)-w11+2), (int)((aHeight*.61)+h11+2));
			g2.setColor(Color.WHITE);
			g2.drawString("assumed (http://www.gnu.org/copyleft/fdl.html) or CC-BY-SA-3.0", (int)((aWidth*0.45)-w11), (int)((aHeight*.61)+h11));
		}
	} // end draw

	
	/**Changes the variables associated with this applet's size to what it actually is.
	 * Essentially a setter.
	 */
	public void update_applet_size()
	{
		this.aWidth = this.getWidth();
		this.aHeight = this.getHeight();
	} // end update applet size

	
	/** Timer for timed events. */
	private class MyTimer implements ActionListener
	{
		/** Timed events (per frame). 
		 * @param a			ActionEvent
		 */
		public void actionPerformed(ActionEvent a)
		{
			// get number of milliseconds that have passed since last call
			timesince = (int) (date.getTime() - lasttime);
			lasttime = date.getTime();
			
			// update applet size
			update_applet_size();
			
			if (!died_yet && !hg.alive)
			{
				playSound(SOUND_CRASH);
				died_yet = true;
			} // play death noise once
			else if (hg.alive)
			{
				died_yet = false;
			} // end if hg still alive
			
			// tick map and map objects
			if (gr == true && hg.alive == true)
			{
				// play menu music if not already playing
				if (music_current != MUSIC_GAME)
				{
					playSong(MUSIC_GAME);
					music_current = MUSIC_GAME;
				} // end play clip
				
				hg.tick(mouse_y);
				scrollspeed = hg.v;
				m.tick(aWidth, aHeight, hg, scrollspeed);
			} // end if game is running and hang glider is active
			
			//tick the main menu and set button actions
			else if (in_mm == true && in_pm == false && in_em == false)
			{
				// play menu music if not already playing
				if (music_current != MUSIC_MENU)
				{
					playSong(MUSIC_MENU);
					music_current = MUSIC_MENU;
				} // end play clip
				
				Menu.Button clickedbutton = mm.tick(mouse_x, mouse_y, clicked);
				
				if (clickedbutton == mm_start_b)
				{
					playSound(SOUND_CLICK);
					clicked = false;
					in_mm = false;
					gr = true;
				} // end start game
				
				if (clickedbutton == mm_quit_b)
				{
					playSound(SOUND_CLICK);
					clicked = false;
					System.exit(0);
				}
				
				if(clickedbutton == mm_credits_b)
				{
					clicked = false;
					in_cm = true;
					in_mm = false;
				}
			}//end main menu
			
			//tick pause menu and set button actions
			else if (in_pm == true && in_mm == false && in_em == false)
			{
				Menu.Button clickedbutton = pm.tick(mouse_x, mouse_y, clicked);
				
				if (clickedbutton == pm_resume_b)
				{
					playSound(SOUND_CLICK);
					clicked = false;
					in_pm = false;
					gr = true;
				} // end if resume clicked
				
				if (clickedbutton == pm_reload_b)
				{
					playSound(SOUND_CLICK);
					clicked = false;
					in_pm = false;
					in_mm = true;
					gr = false;
					in_em = false;
					hg.alive = true;
					hg = new TestGlider(DEFAULT_HG);
					m = new Map(aWidth, aHeight, 2.5);
				} // end if reload button clicked
			}//end pause menu
			
			//tick end menu and set button actions
			else if (hg.alive == false)
			{
				in_em = true;
				Menu.Button clickedbutton = em.tick(mouse_x, mouse_y, clicked);
				
				if(clickedbutton == em_restart_b)
				{
					playSound(SOUND_CLICK);
					clicked = false;
					in_mm = false;
					gr = true;
					in_em = false;
					hg.alive = true;
					hg = new TestGlider(DEFAULT_HG);
					m = new Map(aWidth, aHeight, 2.5);
				}
				
				if(clickedbutton == em_reload_b)
				{
					playSound(SOUND_CLICK);
					clicked = false;
					in_mm = true;
					gr = false;
					in_em = false;
					hg.alive = true;
					hg = new TestGlider(DEFAULT_HG);
					m = new Map(aWidth, aHeight, 2.5);
				}
			}//end end menu
			
			//tick credits menu and set button actions
			else if (in_cm == true)
			{
				Menu.Button clickedbutton = cm.tick(mouse_x, mouse_y, clicked);
				
				if(clickedbutton == cm_reload_b)
				{
					clicked = false;
					in_mm = true;
					in_cm = false;
					hg.alive = true;
					hg = new TestGlider(DEFAULT_HG);
					m = new Map(aWidth, aHeight, 2.5);
				}
			}
			
			// update screen
			repaint();
		} // end actionPerformed
	} // end class MyTimer

	
	/**Double buffering code.
	 * This method was obtained from the internet and cited as common knowledge.
	 * 
	 * @param g			Graphics object to draw to.
	 */
	public void update(Graphics g)
	{
		/** Graphics object the size of screen to store screen. */
		dbImage = createImage(this.getSize().width, this.getSize().height);
		dbg = dbImage.getGraphics();

		// initialize buffer
		if (dbImage == null) {} 
		
		// clear screen in background
		dbg.setColor(getBackground());
		dbg.fillRect(0, 0, aWidth, aHeight);

		// draw elements in background
		dbg.setColor(getForeground());
		paint(dbg);

		// draw image on the screen
		g.drawImage(dbImage, 0, 0, this);
		Toolkit.getDefaultToolkit().sync(); // fixes lag on Ubuntu
	} // end update
	
	public synchronized void playSong(String filename)
	{
		try
		{
			try 
			{
				if (current_clip.isRunning()) current_clip.stop();
			}
			
			catch(NullPointerException e) {};
			
		    // open audio stream
		    URL url = this.getClass().getClassLoader().getResource(filename);
		    AudioInputStream audioIn = AudioSystem.getAudioInputStream(url);
		    
		    // get sound clip
		    current_clip = AudioSystem.getClip();
		    
		    // open clip and start playing
		    current_clip.open(audioIn);
		    current_clip.loop(Clip.LOOP_CONTINUOUSLY);
		} // end try
		
		catch (UnsupportedAudioFileException e)
		{
		    e.printStackTrace();
		} // end catch
		catch (IOException e) 
		{    
			e.printStackTrace();
		} // end catch
		catch (LineUnavailableException e)
		{
		    e.printStackTrace();
		} // end catch
	} // end play sound
	
	public synchronized void playSound(String filename)
	{
		try
		{
		    // open audio stream
		    URL url = this.getClass().getClassLoader().getResource(filename);
		    AudioInputStream audioIn = AudioSystem.getAudioInputStream(url);
		    
		    // get sound clip
		    current_clip = AudioSystem.getClip();
		    
		    // open clip and start playing
		    current_clip.open(audioIn);
		    current_clip.loop(0);
		} // end try
		
		catch (UnsupportedAudioFileException e)
		{
		    e.printStackTrace();
		} // end catch
		catch (IOException e) 
		{    
			e.printStackTrace();
		} // end catch
		catch (LineUnavailableException e)
		{
		    e.printStackTrace();
		} // end catch
	} // end play sound
} // end Game
